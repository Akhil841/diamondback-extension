(fun (quick-sort arr)
    (quick-sort-rec arr 0 (- (vec-len arr) 1)))

(fun (quick-sort-rec arr lo hi)
    (if (< lo hi)
        (let ((p (partition arr lo hi)))
            (block
                (quick-sort-rec arr lo (- p 1))
                (quick-sort-rec arr (+ p 1) hi)))
        0))

(fun (partition arr lo hi)
    (let ((pivot (vec-get arr hi))
          (i (- lo 1))
          (j lo))
        (block
            (loop
                (if (<= j (- hi 1))
                    (block
                        (if (<= (vec-get arr j) pivot)
                            (block
                                (set! i (+ i 1))
                                (swap arr i j))
                            0)
                        (set! j (+ j 1)))
                    (break 0)))
            (swap arr (+ i 1) hi)
            (+ i 1))))

(fun (swap arr i j)
    (let ((tmp (vec-get arr i)))
        (block
            (vec-set! arr i (vec-get arr j))
            (vec-set! arr j tmp))))

(let ((arr (vec 0 6 7 18 10 38 9 1 3 49 9)))
    (block
        (quick-sort arr)
        arr))
